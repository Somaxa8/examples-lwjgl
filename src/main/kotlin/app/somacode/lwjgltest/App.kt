/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package app.somacode.lwjgltest
import org.lwjgl.BufferUtils
import org.lwjgl.Version
import org.lwjgl.glfw.Callbacks.glfwFreeCallbacks
import org.lwjgl.glfw.GLFW.*
import org.lwjgl.glfw.GLFWErrorCallback
import org.lwjgl.opengl.GL
import org.lwjgl.opengl.GL11
import org.lwjgl.opengl.GL15
import org.lwjgl.opengl.GL20.*
import org.lwjgl.opengl.GL30.glBindVertexArray
import org.lwjgl.opengl.GL30.glGenVertexArrays
import org.lwjgl.system.MemoryStack.stackPush
import org.lwjgl.system.MemoryUtil.NULL
import java.awt.SystemColor.window


class App {
    var window: Long? = null
    var width: Int = 800
    var height: Int = 600
    var title: String = "My Game"
    fun run() {
        println("Test LWJGL ${Version.getVersion()}")

        init()
        loop()

        glfwFreeCallbacks(window!!)
        glfwDestroyWindow(window!!)

        glfwTerminate();
        glfwSetErrorCallback(null)!!.free()
    }

    private fun init() {
        // Setup an error callback. The default implementation
        // will print the error message in System.err.
        GLFWErrorCallback.createPrint(System.err).set()

        // Initialize GLFW. Most GLFW functions will not work before doing this.
        check(glfwInit()) { "Unable to initialize GLFW" }

        // Configure GLFW
        glfwDefaultWindowHints() // optional, the current window hints are already the default
        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE) // the window will stay hidden after creation
        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE) // the window will be resizable

        // Create the window
        window = glfwCreateWindow(width, height, title, NULL, NULL)
        if (window == NULL) throw RuntimeException("Failed to create the GLFW window")

        // Setup a key callback. It will be called every time a key is pressed, repeated or released.
        glfwSetKeyCallback(window!!) { window: Long, key: Int, scancode: Int, action: Int, mods: Int ->
            if (key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE) glfwSetWindowShouldClose(window, true) // We will detect this in the rendering loop
        }

        stackPush().use { stack ->
            val pWidth = stack.mallocInt(1) // int*
            val pHeight = stack.mallocInt(1) // int*

            // Get the window size passed to glfwCreateWindow
            glfwGetWindowSize(window!!, pWidth, pHeight)

            // Get the resolution of the primary monitor
            val vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor())

            // Center the window
            glfwSetWindowPos(
                    window!!,
                    (vidmode!!.width() - pWidth[0]) / 2,
                    (vidmode.height() - pHeight[0]) / 2
            )
        }

        // Make the OpenGL context current
        glfwMakeContextCurrent(window!!)
        // Enable v-sync
        glfwSwapInterval(1)

        // Make the window visible
        glfwShowWindow(window!!)
    }

    private fun loop() {
        // This line is critical for LWJGL's interoperation with GLFW's
        // OpenGL context, or any context that is managed externally.
        // LWJGL detects the context that is current in the current thread,
        // creates the GLCapabilities instance and makes the OpenGL
        // bindings available for use.
        GL.createCapabilities()

        var rtri = 0f

        // Run the rendering loop until the user has attempted to close
        // the window or has pressed the ESCAPE key.
        while (!glfwWindowShouldClose(window!!)) {
            // Poll for window events. The key callback above will only be
            // invoked during this call.
            glfwPollEvents()
            // Set the clear color
            glClearColor(1f, 1f, 1f, 0f)
            glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT) // clear the framebuffer

            // Draw

            glLoadIdentity()                                // Reset The View
            glTranslatef(0.0f,0.0f,-1.0f)          // Move Left And Into The Screen
            glRotatef(rtri ,0.0f, 1.0f, 0.0f)  // Rotate The Pyramid On It's Y Axis

            glBegin(GL_TRIANGLES)

            glColor3f(1.0f,0.0f,0.0f)       // Red
            glVertex3f(0.0f, 1.0f, 0.0f)          // Top Of Triangle (Front)
            glColor3f(0.0f,1.0f,0.0f)       // Green
            glVertex3f(-1.0f,-1.0f, 1.0f)          // Left Of Triangle (Front)
            glColor3f(0.0f,0.0f,1.0f)       // Blue
            glVertex3f(1.0f,-1.0f, 1.0f)          // Right Of Triangle (Front)

            glColor3f(1.0f,0.0f,0.0f)       // Red
            glVertex3f(0.0f, 1.0f, 0.0f)          // Top Of Triangle (Right)
            glColor3f(0.0f,0.0f,1.0f)       // Blue
            glVertex3f(1.0f,-1.0f, 1.0f)          // Left Of Triangle (Right)
            glColor3f(0.0f,1.0f,0.0f)       // Green
            glVertex3f(1.0f,-1.0f, -1.0f)         // Right Of Triangle (Right)

            glColor3f(1.0f,0.0f,0.0f)       // Red
            glVertex3f(0.0f, 1.0f, 0.0f)          // Top Of Triangle (Back)
            glColor3f(0.0f,1.0f,0.0f)       // Green
            glVertex3f(1.0f,-1.0f, -1.0f)         // Left Of Triangle (Back)
            glColor3f(0.0f,0.0f,1.0f)       // Blue
            glVertex3f(-1.0f,-1.0f, -1.0f)         // Right Of Triangle (Back)

            glColor3f(1.0f,0.0f,0.0f)       // Red
            glVertex3f(0.0f, 1.0f, 0.0f)          // Top Of Triangle (Left)
            glColor3f(0.0f,0.0f,1.0f)       // Blue
            glVertex3f(-1.0f,-1.0f,-1.0f)          // Left Of Triangle (Left)
            glColor3f(0.0f,1.0f,0.0f)       // Green
            glVertex3f(-1.0f,-1.0f, 1.0f)          // Right Of Triangle (Left)
            glEnd()                                         // Done Drawing The Pyramid

            rtri += 0.1f
            println("Angle: $rtri")

            // End Draw

            glfwSwapBuffers(window!!) // swap the color buffers
        }
    }
}

fun main() {
    App().run()
}
